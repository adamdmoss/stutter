
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

#include "timefn.h"

void spinReal1ms()
{
    const UTIL_time_t starttime = UTIL_getTime();
    do
    {
        if (UTIL_clockSpanMicro(starttime) >= 1000) break;
    } while(1);
}

typedef struct { time_t tv_sec; long tv_nsec; } timespec;

void main(void)
{
    const uint64_t NUM_MS_TO_RUN = 1000 * 10;
    const uint64_t NOTEWORTHY_NS_OVERRUN = 100;

#define bucketcount 120
    int overrunbuckets10us[bucketcount] = { 0 };
#define NS_TO_BUCKET(ns) ( (ns) / 10000UL < bucketcount ? (ns) / 10000UL : bucketcount-1 )

#define USE_CPUTIME() 1

    PTime CPUTimeOverheadNS = -1;
    for (int i=0; i<10000000; ++i)
    {
#if USE_CPUTIME()
        UTIL_waitForCPUNextTick();
        const UTIL_time_t a = UTIL_getCPUTime();
        const PTime OverheadNS = UTIL_getSpanTimeNano(a,UTIL_getCPUTime());
#else
        struct timespec ts = { 0, 0 };
        UTIL_waitForNextTick();
        const UTIL_time_t a = UTIL_getTime();
        //nanosleep(&ts, NULL);
        const PTime OverheadNS = UTIL_getSpanTimeNano(a,UTIL_getTime());
#endif
        if (OverheadNS < CPUTimeOverheadNS && OverheadNS > 0)
            CPUTimeOverheadNS = OverheadNS;
    }
    if (CPUTimeOverheadNS == -1) exit(-1);
    printf("Using CPU timing?%d (outer loop CPU time overhead appears to be %luns)\n", USE_CPUTIME(), CPUTimeOverheadNS);

    uint64_t runs_remaining = NUM_MS_TO_RUN;
    while(runs_remaining--) {
#if USE_CPUTIME()
        UTIL_waitForCPUNextTick();
        const UTIL_time_t starttime = UTIL_getCPUTime();
        spinReal1ms();
        const UTIL_time_t endtime = UTIL_getCPUTime();
        const PTime span = UTIL_getSpanTimeNano(starttime,endtime) - CPUTimeOverheadNS;
#else
        struct timespec ts = { 0, 1000000L };
        UTIL_waitForNextTick();
        const UTIL_time_t starttime = UTIL_getTime();
        nanosleep(&ts, NULL);
        const UTIL_time_t endtime = UTIL_getTime();
        const PTime span = 2*1000000UL-((UTIL_getSpanTimeNano(starttime,endtime) - CPUTimeOverheadNS));
#endif
        if (//span <= 1000000UL &&
            1){//1000000UL-span >= NOTEWORTHY_NS_OVERRUN) {
            //printf("span=%luns\t", span);
            if (span <= 1000000UL)
                overrunbuckets10us[NS_TO_BUCKET(1000000UL-span)]++;
            else
                overrunbuckets10us[NS_TO_BUCKET(0)]++;
        }
    }

    printf("\n");

    for (int i=0; i<bucketcount; ++i)
    {
        if(overrunbuckets10us[i])printf("\t%d@%dus", overrunbuckets10us[i], 10*(1+i));
    }

    /*
    UTIL_waitForNextTick();
    const UTIL_time_t starttime = UTIL_getCPUTime();
    UTIL_waitForNextTick();
    UTIL_time_t endtime = UTIL_getCPUTime();
    fprintf(stderr, "tick is %luns\n", UTIL_getSpanTimeNano(starttime, endtime));
    sleep(1);//spinReal1ms();
    endtime = UTIL_getCPUTime();
    fprintf(stderr, "overall is %luns\n", UTIL_getSpanTimeNano(starttime, endtime));
    */
    printf("\n");
}

